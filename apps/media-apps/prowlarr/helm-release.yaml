---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prowlarr
  namespace: ${main_namespace}
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  valuesFrom:
    - kind: Secret
      name: prowlarr-secret-values

  values:

    global:
      labels:
        app.kubernetes.io/part-of: servarr

    defaultPodOptions:
      labels:
        app.kubernetes.io/part-of: servarr
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/part-of: servarr

    controllers:

      prowlarr:

        pod:
          securityContext:
            runAsUser: &PUID 568
            runAsGroup: &GUID 568
            runAsNonRoot: true
            fsGroup: *GUID
            seccompProfile:
              type: RuntimeDefault

        containers:

          prowlarr:
            image:
              repository: ghcr.io/onedr0p/prowlarr
              tag: 1.25.4.4818@sha256:4df8b9d21469e5051d53d753fb1a277875ac5cdd1dc69068541adb165aae17a1
            env:
              # https://techcommunity.microsoft.com/t5/microsoft-developer-community/hardening-an-asp-net-container-running-on-kubernetes/ba-p/2542224
              COMPlus_EnableDiagnostics: "0"
              PROWLARR__APP__INSTANCENAME: Prowlarr
              PROWLARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: prowlarr-api-key
                    key: key
              PROWLARR__AUTH__METHOD: External
              PROWLARR__AUTH__REQUIRED: Enabled
              PROWLARR__SERVER__PORT: &port_http 9696
              PROWLARR__LOG__LEVEL: info
              PROWLARR__POSTGRES__HOST:
                valueFrom:
                  secretKeyRef:
                    name: cnpg-user-prowlarr-user
                    key: HOST
              PROWLARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: cnpg-user-prowlarr-user
                    key: ROLE
              PROWLARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: cnpg-user-prowlarr-user
                    key: PASSWORD
              PROWLARR__POSTGRES__MAINDB: prowlarr-main
              PROWLARR__POSTGRES__LOGDB: prowlarr-log
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: *port_http
                    path: /ping
                  failureThreshold: 6
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: *port_http
                    path: /ping
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: *port_http
                    path: /ping
                  failureThreshold: 30
                  periodSeconds: 5
            resources:
              requests:
                cpu: 30m
                memory: 400Mi
              limits:
                memory: 700Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

        initContainers:

          postgresql:
            image:
              repository: ghcr.io/joker9944/postgresql-client
              tag: 3.20.3@sha256:44cb1faae34bb0a44b1caa6afd0c140ee5167cfbac6482dec0692b25e91ecf54
            env:
              PGHOST:
                valueFrom:
                  secretKeyRef:
                    name: servarr-cnpg-superuser
                    key: host
              PGUSER:
                valueFrom:
                  secretKeyRef:
                    name: servarr-cnpg-superuser
                    key: user
              PGPASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: servarr-cnpg-superuser
                    key: password
              MAIN_DATABASE: prowlarr-main
              LOG_DATABASE: prowlarr-log
              DATABASE_ROLE: prowlarr-main-group
            command: [/bin/sh, -c]
            args:
              - |
                echo "Testing connection for DB $MAIN_DATABASE and $LOG_DATABASE on $HOST"
                until
                  pg_isready --dbname="$MAIN_DATABASE"
                  pg_isready --dbname="$LOG_DATABASE"
                  do sleep 5
                done
                echo "DB $MAIN_DATABASE and $LOG_DATABASE available on $HOST"
                echo "Changing owner of the $LOG_DATABASE database on $HOST"
                psql --command="ALTER DATABASE \"$LOG_DATABASE\" OWNER TO \"$DATABASE_ROLE\";"
                psql --command="GRANT ALL ON DATABASE \"$LOG_DATABASE\" TO \"$DATABASE_ROLE\";"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    service:

      prowlarr:
        controller: prowlarr
        ports:
          http:
            port: *port_http

    ingress:

      prowlarr:
        annotations:
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: ingress-system-chain-basic@kubernetescrd,ingress-system-local-link-whitelist@kubernetescrd,kube-system-oidc-forward-auth-middleware@kubernetescrd
          oidc.ingress.kubernetes.io/forward-auth-enabled: "true"
          oidc.ingress.kubernetes.io/issuer-url: https://idm.vonarx.online/oauth2/openid/prowlarr/
          oidc.ingress.kubernetes.io/audience: prowlarr
          oidc.ingress.kubernetes.io/scopes: openid
          oidc.ingress.kubernetes.io/existing-secret: prowlarr-oidc
        hosts:
          - host: &host prowlarr.vonarx.online
            paths:
              - path: /
                service:
                  identifier: prowlarr
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-vonarx-online

    persistence:

      config:
        type: emptyDir

      tmp:
        type: emptyDir

    rawResources:

      main:
        apiVersion: db.movetokube.com/v1alpha1
        kind: Postgres
        spec:
          spec:
            database: prowlarr-main
            dropOnDelete: false

      log:
        apiVersion: db.movetokube.com/v1alpha1
        kind: Postgres
        spec:
          spec:
            database: prowlarr-log
            dropOnDelete: false

      user:
        apiVersion: db.movetokube.com/v1alpha1
        kind: PostgresUser
        spec:
          spec:
            role: prowlarr
            database: prowlarr-main
            secretName: cnpg-user
            privileges: OWNER
