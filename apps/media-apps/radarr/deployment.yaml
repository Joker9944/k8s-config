---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: radarr
    app.kubernetes.io/part-of: servarr
  name: radarr
  namespace: ${main_namespace}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: radarr
      app.kubernetes.io/instance: radarr
      app.kubernetes.io/part-of: servarr
  template:
    metadata:
      labels:
        app.kubernetes.io/name: radarr
        app.kubernetes.io/instance: radarr
        app.kubernetes.io/part-of: servarr
    spec:
      securityContext:
        fsGroup: 6000
        supplementalGroups:
          - 568
      containers:
        - name: radarr
          image: ghcr.io/onedr0p/radarr:5.8.3.8933@sha256:c8fa12f8efdbcb8ef736b019335c39f4962def9bee479b0fb8b0401824bcf26b
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 7878
              protocol: TCP
          resources:
            requests:
              cpu: 40m
              memory: 400Mi
            limits:
              cpu: 60m
              memory: 600Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 6000
            runAsNonRoot: true
            runAsUser: 6005
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: UMASK
              value: "0002"
            - name: UMASK_SET
              value: "0002"
            - name: Radarr__Postgres__Host
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: HOST
            - name: Radarr__Postgres__User
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: LOGIN
            - name: Radarr__Postgres__Password
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: PASSWORD
            - name: Radarr__Postgres__MainDb
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: DATABASE_NAME
            - name: Radarr__Postgres__LogDb
              value: radarr-log
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ping
              port: 7878
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 4
            httpGet:
              path: /ping
              port: 7878
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 12
            successThreshold: 2
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /ping
              port: 7878
              scheme: HTTP
            initialDelaySeconds: 12
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /mnt/media-data
              name: media
      initContainers:
        - name: init-postgresql
          image: ghcr.io/joker9944/postgresql-client:3.20.2@sha256:49a4e6bedc87186bf6501de5ca7eb74fc137a83bed65adda89cdd7486910c127
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 6000
            runAsNonRoot: true
            runAsUser: 568
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: HOST
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: HOST
            - name: MAIN_DATABASE
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: DATABASE_NAME
            - name: MAIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: LOGIN
            - name: MAIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cnpg-user-radarr
                  key: PASSWORD
            - name: MAINTANACE_DATABASE
              valueFrom:
                secretKeyRef:
                  name: servarr-cnpg-superuser
                  key: user
            - name: SUPERUSER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: servarr-cnpg-superuser
                  key: username
            - name: SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: servarr-cnpg-superuser
                  key: password
            - name: LOG_DATABASE
              value: radarr-log
          command:
            - /bin/sh
            - -c
            - |
              echo "Testing connection for database $MAIN_DATABASE on $HOST"
              until
                PGPASSWORD="$MAIN_PASSWORD" pg_isready --username="$MAIN_USERNAME" --dbname="$MAIN_DATABASE" --host="$HOST"
                do sleep 5
              done
              echo "Database $MAIN_DATABASE avilable on $HOST"
              echo "Changing owner of the $LOG_DATABASE database on $HOST"
              PGPASSWORD="$SUPERUSER_PASSWORD" psql --username="$SUPERUSER_USERNAME" --dbname="$MAINTANACE_DATABASE" --host="$HOST" -c "ALTER DATABASE $LOG_DATABASE OWNER TO $MAIN_USERNAME;"
      serviceAccountName: default
      strategy: Recreate
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/part-of: servarr
          maxSkew: 1
          nodeAffinityPolicy: Honor
          nodeTaintsPolicy: Honor
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: radarr-config
        - name: media
          nfs:
            path: /mnt/chronos/media-data
            server: 192.168.178.14
