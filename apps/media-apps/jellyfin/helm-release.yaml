---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: jellyfin
  namespace: ${main_namespace}
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.4.0
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  valuesFrom:
    - kind: Secret
      name: jellyfin-secret-values

  values:

    controllers:
      jellyfin:
        type: statefulset

        pod:
          securityContext:
            runAsUser: &PUID 6003
            runAsGroup: &GUID 6000
            runAsNonRoot: true
            fsGroup: *GUID
            supplementalGroups: [ 44, 107, 568 ]
            seccompProfile:
              type: RuntimeDefault

          tolerations:
            - key: nvidia.com/gpu
              operator: Exists
              effect: NoSchedule

        containers:
          jellyfin:
            image:
              repository: ghcr.io/jellyfin/jellyfin
              tag: 10.9.11@sha256:fc1b51f4be3fba725e42dae2022d9c6a5b069acce01bef04d32fdee025dc511e
            env:
              UMASK: "0002"
              NVIDIA_DRIVER_CAPABILITIES: all
              JELLYFIN_PublishedServerUrl: https://jellyfin.vonarx.online
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &port_http 8096
                  failureThreshold: 6
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port_http
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port_http
                  failureThreshold: 30
                  periodSeconds: 5
            resources:
              requests:
                cpu: 10m
                memory: 1Gi
              limits:
                memory: 3Gi
                nvidia.com/gpu: 1
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

      autodiscovery-proxy:
        type: daemonset

        pod:
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            runAsNonRoot: true
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
          hostNetwork: true

        containers:
          socat:
            image:
              repository: docker.io/alpine/socat
              tag: 1.8.0.0@sha256:0f43daa5d06e15d1e655e5f9a129f29f0e2ed97f7b61a3ad28373045029725b0
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command: [cat, /tmp/healthy]
                  failureThreshold: 6
              readiness:
                enabled: true
                custom: true
                spec:
                  exec:
                    command: [cat, /tmp/healthy]
              startup:
                enabled: true
                custom: true
                spec:
                  exec:
                    command: [cat, /tmp/healthy]
                  failureThreshold: 30
                  periodSeconds: 5
            command: [/bin/sh, -c]
            args: # Script taken from TrueCharts jellyfin chart
              - |
                set -e
                export TARGET_IP=$(getent hosts 'jellyfin-autodiscovery' | awk '{ print $1 }')
                [[ -n $TARGET_IP ]]
                touch /tmp/healthy
                echo "Proxing to ip $TARGET_IP"
                socat UDP4-LISTEN:7359,fork,reuseaddr,rcvbuf=8096 "UDP4-SENDTO:$TARGET_IP:7359,rcvbuf=8096"
                rm -rf /tmp/healthy
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    service:
      jellyfin:
        controller: jellyfin
        primary: true
        ports:
          http:
            primary: true
            port: *port_http
      autodiscovery:
        controller: jellyfin
        ports:
          udp:
            port: 7359
            protocol: UDP

    ingress:
      jellyfin:
        annotations:
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: ingress-system-chain-basic@kubernetescrd,ingress-system-country-whitelist@kubernetescrd
        hosts:
          - host: &host jellyfin.vonarx.online
            paths:
              - path: /
                service:
                  identifier: jellyfin
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-vonarx-online

    persistence:
      config:
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        retain: true
        size: &pvc_config_size 2Gi
        dataSourceRef:
          apiGroup: volsync.backube
          kind: ReplicationDestination
          name: jellyfin-dest-config
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /config
      transcodes:
        type: emptyDir
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /config/transcodes
      cache:
        type: emptyDir
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /cache
      media:
        type: nfs
        server: 192.168.178.14
        path: /mnt/chronos/media-data
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /mnt/media-data
      tmp:
        type: emptyDir

    rawResources:

      dest-config:
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationDestination
        spec:
          spec:
            trigger:
              manual: restore-once
            restic:
              repository: jellyfin-restic-config
              accessModes: [ReadWriteOnce]
              capacity: *pvc_config_size
              copyMethod: Snapshot
              moverSecurityContext:
                runAsUser: *PUID
                fsGroup: *GUID
                runAsGroup: *GUID

      source-config:
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationSource
        spec:
          spec:
            sourcePVC: jellyfin-config
            trigger:
              schedule: '@daily'
            restic:
              repository: jellyfin-restic-config
              pruneIntervalDays: 7
              retain:
                daily: 7
                weekly: 4
              accessModes: [ReadWriteOnce]
              copyMethod: Snapshot
              cacheCapacity: 2Gi
              moverSecurityContext:
                runAsUser: *PUID
                fsGroup: *GUID
                runAsGroup: *GUID
