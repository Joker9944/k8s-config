---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: jellyfin
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.4.0
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s

  valuesFrom:
    - kind: Secret
      name: jellyfin-secret-values

  values:

    global:
      alwaysAppendIdentifierToResourceName: true

    controllers:
      jellyfin:
        type: statefulset

        pod:
          securityContext:
            runAsUser: &PUID 6003
            runAsGroup: &GUID 6000
            runAsNonRoot: true
            fsGroup: *GUID
            supplementalGroups: [ 44, 107, 568 ]
            seccompProfile:
              type: RuntimeDefault

          tolerations:
            - key: nvidia.com/gpu
              operator: Exists
              effect: NoSchedule

          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 10
                  preference:
                    matchExpressions:
                      - key: vonarx.online/nfs-host
                        operator: Exists

        containers:
          jellyfin:
            image:
              repository: ghcr.io/jellyfin/jellyfin
              tag: 10.11.0@sha256:519b02989eafcc4bdb558bdc7014c2395c19608e5c2d7ed99a5f3edd0c75f7ef
            env:
              UMASK: "0002"
              NVIDIA_DRIVER_CAPABILITIES: all
              JELLYFIN_PublishedServerUrl: https://jellyfin.vonarx.online
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &port_http 8096
                  failureThreshold: 6
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port_http
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port_http
                  failureThreshold: 30
                  periodSeconds: 5
            resources:
              requests:
                cpu: 10m
                memory: 1Gi
              limits:
                memory: 8Gi
                nvidia.com/gpu: 1
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    service:
      jellyfin:
        controller: jellyfin
        primary: true
        ports:
          http:
            primary: true
            port: *port_http
      autodiscovery:
        controller: jellyfin
        type: LoadBalancer
        annotations:
          metallb.universe.tf/loadBalancerIPs: 192.168.0.130
        ports:
          service-discovery:
            port: 1900
            protocol: UDP
          client-discovery:
            port: 7359
            protocol: UDP

    ingress:
      jellyfin:
        annotations:
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          # TODO hardcoding the namespace until a solutions is found on how to do this with replacements
          traefik.ingress.kubernetes.io/router.middlewares: jellyfin-chain-country-whitelist@kubernetescrd
        hosts:
          - host: &host jellyfin.vonarx.online
            paths:
              - path: /
                service:
                  identifier: jellyfin
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-vonarx-online-cert

    persistence:
      config:
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        retain: true
        size: &pvc_config_size 7Gi
        dataSourceRef:
          apiGroup: volsync.backube
          kind: ReplicationDestination
          name: jellyfin-dest-config
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /config
      transcodes:
        type: emptyDir
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /config/transcodes
      cache:
        type: emptyDir
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /cache
      media:
        type: nfs
        server: 192.168.0.10
        path: /mnt/chronos/media-data
        advancedMounts:
          jellyfin:
            jellyfin:
              - path: /mnt/media-data
      tmp:
        type: emptyDir

    rawResources:

      dest-config:
        enabled: false
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationDestination
        spec:
          spec:
            trigger:
              manual: restore-once
            restic:
              repository: jellyfin-restic-config
              accessModes: [ ReadWriteOnce ]
              capacity: *pvc_config_size
              copyMethod: Snapshot
              moverSecurityContext:
                runAsUser: *PUID
                fsGroup: *GUID
                runAsGroup: *GUID
              storageClassName: longhorn
              volumeSnapshotClassName: &snapshot_class longhorn

      source-config:
        enabled: true
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationSource
        spec:
          spec:
            sourcePVC: jellyfin-config
            trigger:
              schedule: '@daily'
            restic:
              repository: jellyfin-restic-config
              pruneIntervalDays: 7
              retain:
                daily: 7
                weekly: 4
              copyMethod: Clone
              storageClassName: longhorn-local-lax
              cacheStorageClassName: longhorn
              moverSecurityContext:
                runAsUser: *PUID
                fsGroup: *GUID
                runAsGroup: *GUID
