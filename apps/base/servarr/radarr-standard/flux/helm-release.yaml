---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr-standard
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.3.0
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s

  valuesFrom:
    - kind: Secret
      name: radarr-standard-secret-values

  values:

    global:
      alwaysAppendIdentifierToResourceName: true

    controllers:

      radarr:

        pod:
          securityContext:
            runAsUser: &PUID 6005
            runAsGroup: &GUID 6000
            runAsNonRoot: true
            fsGroup: *GUID
            fsGroupChangePolicy: OnRootMismatch
            supplementalGroups: [ 568 ]
            seccompProfile:
              type: RuntimeDefault

        containers:

          radarr:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 6.0.0.10217@sha256:176205e666410114cccbdcd69e38b748b24ee4a2fa83a2ba5d0d49559a496d68
            env:
              # https://techcommunity.microsoft.com/t5/microsoft-developer-community/hardening-an-asp-net-container-running-on-kubernetes/ba-p/2542224
              COMPlus_EnableDiagnostics: "0"
              UMASK: "0002"
              RADARR__APP__INSTANCENAME: Radarr Standard
              RADARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: radarr-standard-api-key
                    key: key
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: Enabled
              RADARR__SERVER__PORT: &port_http 7878
              RADARR__LOG__LEVEL: info
              RADARR__POSTGRES__HOST: servarr-cnpg-rw
              RADARR__POSTGRES__USER:
                valueFrom:
                  secretKeyRef:
                    name: radarr-standard-cnpg-user
                    key: username
              RADARR__POSTGRES__PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: radarr-standard-cnpg-user
                    key: password
              RADARR__POSTGRES__MAINDB: radarr-standard-main
              RADARR__POSTGRES__LOGDB: radarr-standard-log
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: *port_http
                    path: /ping
                  failureThreshold: 6
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: *port_http
                    path: /ping
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: *port_http
                    path: /ping
                  failureThreshold: 30
                  periodSeconds: 5
            resources:
              requests:
                cpu: 20m
                memory: 500Mi
              limits:
                memory: 700Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

        initContainers:

          postgresql:
            image:
              repository: ghcr.io/joker9944/postgresql-client
              tag: 3.22.1@sha256:2abc863c18410f993895afdc138cd9e19e36b5ff66fe1ce8eb95b93997fc2a83
            env:
              PGHOST: servarr-cnpg-r
              PGUSER:
                valueFrom:
                  secretKeyRef:
                    name: radarr-standard-cnpg-user
                    key: username
              PGPASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: radarr-standard-cnpg-user
                    key: password
              MAIN_DATABASE: radarr-standard-main
              LOG_DATABASE: radarr-standard-log
            command: [/bin/sh, -c]
            args:
              - |
                echo "Testing connection for DB $MAIN_DATABASE and $LOG_DATABASE on $PGHOST"
                until
                  pg_isready --dbname="$MAIN_DATABASE"
                  pg_isready --dbname="$LOG_DATABASE"
                  do sleep 5
                done
                echo "DB $MAIN_DATABASE and $LOG_DATABASE available on $PGHOST"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    service:

      radarr:
        controller: radarr
        ports:
          http:
            port: *port_http

    ingress:

      radarr:
        annotations:
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: servarr-chain-network-internal-whitelist@kubernetescrd,servarr-radarr-standard-oidc@kubernetescrd
        hosts:
          - host: &host radarr-standard.vonarx.online
            paths:
              - path: /
                service:
                  identifier: radarr
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-vonarx-online-cert

    persistence:

      config:
        type: emptyDir

      tmp:
        type: emptyDir

      media-cover-overlay:
        type: persistentVolumeClaim
        retain: false
        accessMode: ReadWriteMany
        size: 500Mi
        globalMounts:
          - path: /config/MediaCover

      media:
        type: nfs
        server: 192.168.0.10
        path: /mnt/chronos/media-data
        globalMounts:
          - path: /mnt/media-data

    rawResources:

      main:
        apiVersion: postgresql.cnpg.io/v1
        kind: Database
        spec:
          spec:
            name: radarr-standard-main
            owner: radarr-standard
            cluster:
              name: servarr-cnpg
            databaseReclaimPolicy: retain

      log:
        apiVersion: postgresql.cnpg.io/v1
        kind: Database
        spec:
          spec:
            name: radarr-standard-log
            owner: radarr-standard
            cluster:
              name: servarr-cnpg
            databaseReclaimPolicy: retain

      oidc:
        apiVersion: traefik.io/v1alpha1
        kind: Middleware
        spec:
          spec:
            plugin:
              oidc:
                providerURL: https://idm.vonarx.online/oauth2/openid/radarr-standard
                clientID: radarr-standard
                clientSecret: urn:k8s:secret:radarr-standard-oidc:CLIENT_SECRET
                sessionEncryptionKey: urn:k8s:secret:radarr-standard-oidc:SESSION_ENCRYPTION_KEY
                callbackURL: /oauth2/callback
                enablePKCE: true
                scopes:
                  - groups
                allowedRolesAndGroups:
                  - servarr_admins@idm.vonarx.online
                allowedUserDomains:
                  - vonarx.online
                excludedURLs:
                  - /favicon.ico
